<?xml version="1.0" encoding="utf-8"?>
<FSharpLintSettings>
  <Analysers>
    <Analyser AnalyserId="FSharpLint.Hints">
      <Rules>
        <Rule Name="Hints">
          <RuleSettings>
            <Property name="Hints">
              <![CDATA[
                not (a =  b) ===> a <> b
                not (a <> b) ===> a =  b
                not (a >  b) ===> a <= b
                not (a >= b) ===> a <  b
                not (a <  b) ===> a >= b
                not (a <= b) ===> a >  b
                compare x y <> 1 ===> x <= y
                compare x y = -1 ===> x < y
                compare x y <> -1 ===> x >= y
                compare x y = 1 ===> x > y
                
                List.head (List.sort x) ===> List.min x
                List.head (List.sortBy f x) ===> List.minBy f x
                
                List.map f (List.map g x) ===> List.map (g >> f) x
                Array.map f (Array.map g x) ===> Array.map (g >> f) x
                Seq.map f (Seq.map g x) ===> Seq.map (g >> f) x
                List.nth x 0 ===> List.head x
                List.map f (List.replicate n x) ===> List.replicate n (f x)
                List.rev (List.rev x) ===> x
                Array.rev (Array.rev x) ===> x
                List.fold (@) [] ===> List.concat
                List.map id ===> id
                Array.map id ===> id
                Seq.map id ===> id
                (List.length x) = 0 ===> List.isEmpty x
                (Array.length x) = 0 ===> Array.isEmpty x
                (Seq.length x) = 0 ===> Seq.isEmpty x
                x = [] ===> List.isEmpty x
                x = [||] ===> Array.isEmpty x
                (List.length x) <> 0 ===> not (List.isEmpty x)
                (Array.length x) <> 0 ===> not (Array.isEmpty x)
                (Seq.length x) <> 0 ===> not (Seq.isEmpty x)
                (List.length x) > 0 ===> not (List.isEmpty x)
                (Array.length x) <> 0 ===> not (Array.isEmpty x)
                (Seq.length x) <> 0 ===> not (Seq.isEmpty x)
                
                List.isEmpty (List.filter f x) ===> not (List.exists f x)
                Array.isEmpty (Array.filter f x) ===> not (Array.exists f x)
                Seq.isEmpty (Seq.filter f x) ===> not (Seq.exists f x)
                not (List.isEmpty (List.filter f x)) ===> List.exists f x
                not (Array.isEmpty (Array.filter f x)) ===> Array.exists f x
                not (Seq.isEmpty (Seq.filter f x)) ===> Seq.exists f x
                
                List.length x >= 0 ===> true
                Array.length x >= 0 ===> true
                Seq.length x >= 0 ===> true
                
                x = true ===> x
                x = false ===> not x
                true = a ===> a
                false = a ===> not a
                a <> true ===> not a
                a <> false ===> a
                true <> a ===> not a
                false <> a ===> a
                if a then true else false ===> a
                if a then false else true ===> not a
                not (not x) ===> x
                
                (fst x, snd x) ===> x
                
                true && x ===> x
                false && x ===> false
                true || x ===> true
                false || x ===> x
                not true ===> false
                not false ===> true
                fst (x, y) ===> x
                snd (x, y) ===> y
                List.fold f x [] ===> x
                Array.fold f x [||] ===> x
                List.foldBack f x [] ===> x
                Array.foldBack f x [||] ===> x
                x - 0 ===> x
                x * 1 ===> x
                x / 1 ===> x
                
                List.fold (+) 0 ===> List.sum
                Array.fold (+) 0 ===> Array.sum
                Seq.fold (+) 0 ===> Seq.sum
                
                List.empty ===> []
                Array.empty ===> [||]
                
                x::[] ===> [x]
                
                x @ [] ===> x
                
                List.isEmpty [] ===> true
                Array.isEmpty [||] ===> true
                
                fun _ -> () ===> ignore
                fun x -> x ===> id
                id x ===> x
                id >> f ===> f
                f >> id ===> f
              ]]>
            </Property>
          </RuleSettings>
        </Rule>
      </Rules>
      <AnalyserSettings>
        <Property name="Enabled">True</Property>
      </AnalyserSettings>
    </Analyser>

    <Analyser AnalyserId="FSharpLint.NameConventions">
      <Rules>
        <Rule Name="IdentifiersMustNotContainUnderscores">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="InterfaceNamesMustBeginWithI">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="ExceptionNamesMustEndWithException">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="TypeNamesMustBePascalCase">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="RecordFieldNamesMustBePascalCase">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="EnumCasesMustBePascalCase">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="ModuleNamesMustBePascalCase">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="LiteralNamesMustBePascalCase">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="NamespaceNamesMustBePascalCase">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="MemberNamesMustBePascalCase">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="ParameterMustBeCamelCase">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="NonPublicValuesCamelCase">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
      </Rules>
      <AnalyserSettings />
    </Analyser>
    <Analyser AnalyserId="FSharpLint.SourceLength">
      <Rules>
        <Rule Name="MaxLinesInFunction">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">70</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInLambdaFunction">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">5</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInMatchLambdaFunction">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">70</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInValue">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">70</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInConstructor">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">70</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInMember">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">70</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInProperty">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">70</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInClass">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">500</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInEnum">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">500</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInUnion">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">500</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInRecord">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">500</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxLinesInModule">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">1000</Property>>
          </RuleSettings>
        </Rule>
      </Rules>
      <AnalyserSettings />
    </Analyser>
    <Analyser AnalyserId="FSharpLint.Typography">
      <Rules>
        <Rule Name="MaxLinesInFile">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Lines">1000</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxCharactersOnLine">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="Length">121</Property>>
          </RuleSettings>
        </Rule>
        <Rule Name="NoTabCharacters">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="TrailingNewLineInFile">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="TrailingWhitespaceOnLine">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="NumberOfSpacesAllowed">1</Property>
            <Property name="OneSpaceAllowedAfterOperator">True</Property>
            <Property name="IgnoreBlankLines">True</Property>
          </RuleSettings>
        </Rule>
      </Rules>
      <AnalyserSettings>
        <Property name="Enabled">True</Property>
      </AnalyserSettings>
    </Analyser>
    <Analyser AnalyserId="FSharpLint.NestedStatements">
      <Rules />
      <AnalyserSettings>
        <Property name="Enabled">True</Property>
        <Property name="Depth">8</Property>
      </AnalyserSettings>
    </Analyser>
    <Analyser AnalyserId="FSharpLint.NumberOfItems">
      <Rules>
        <Rule Name="MaxNumberOfFunctionParameters">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="MaxItems">5</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxNumberOfMembers">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="MaxItems">32</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxNumberOfItemsInTuple">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="MaxItems">5</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="MaxNumberOfBooleanOperatorsInCondition">
          <RuleSettings>
            <Property name="Enabled">True</Property>
            <Property name="MaxItems">4</Property>
          </RuleSettings>
        </Rule>
      </Rules>
      <AnalyserSettings />
    </Analyser>
    <Analyser AnalyserId="FSharpLint.RaiseWithTooManyArguments">
      <Rules>
        <Rule Name="FailwithWithSingleArgument">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="RaiseWithSingleArgument">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="NullArgWithSingleArgument">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="InvalidOpWithSingleArgument">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="FailwithfWithArgumentsMatchingFormatString">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="InvalidArgWithTwoArguments">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
      </Rules>
      <AnalyserSettings>
        <Property name="Enabled">True</Property>
      </AnalyserSettings>
    </Analyser>
    <Analyser AnalyserId="FSharpLint.Binding">
      <Rules>
        <Rule Name="FavourIgnoreOverLetWild">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="UselessBinding">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="TupleOfWildcards">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
        <Rule Name="WildcardNamedWithAsPattern">
          <RuleSettings>
            <Property name="Enabled">True</Property>
          </RuleSettings>
        </Rule>
      </Rules>
      <AnalyserSettings>
        <Property name="Enabled">True</Property>
      </AnalyserSettings>
    </Analyser>
    <Analyser AnalyserId="FSharpLint.FunctionReimplementation">
      <Rules />
      <AnalyserSettings>
        <Property name="Enabled">True</Property>
      </AnalyserSettings>
    </Analyser>
    <Analyser AnalyserId="FSharpLint.XmlDocumentation">
      <Rules>
        <Rule Name="ExceptionDefinitionHeader">
          <RuleSettings>
            <Property name="Enabled">False</Property>
          </RuleSettings>
        </Rule>
      </Rules>
      <AnalyserSettings />
    </Analyser>
    <Analyser AnalyserId="FSharpLint.CyclomaticComplexity">
      <Rules />
      <AnalyserSettings>
        <Property name="Enabled">True</Property>
        <Property name="MaxCyclomaticComplexity">10</Property>
        <Property name="IncludeMatchStatements">False</Property>
      </AnalyserSettings>
    </Analyser>
  </Analysers>
</FSharpLintSettings>